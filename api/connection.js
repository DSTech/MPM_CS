var log        = require( "./log" );

//Note: 10,000 milliseconds = 10 sec
var default_timeout     = 10000;
var default_headers     = { "Content-Type": "application/json", "Cache-Control": "max-age=0" };
var error_headers       = { "Content-Type": "text/plain",       "Cache-Control": "max-age=0" };

/**
 * Constructor for a Connection.
 * Connection manages an ongoing connection with a client that has requested something from the API.
 * @param {http.IncomingMessage} req - The HTTP request object for the connection.
 * @param {http.ServerResponse} res - The HTTP response object for the connection.
 */
function Connection( req, res ) {
    this.req = req;
    this.res = res;
    this.url = null;
    this.sql = null;
    this._timeout = null;
    this._ended = false;
}
module.exports = Connection;

/**
 * Call this function to start (or reset) a time-out timer on the connection.
 * If .end() is not called on the connection before this time, the connection will .error() automatically with a 503.
 * @param {Number} timeout - Optional. Amount of time in milliseconds to wait before terminating the connection. Defaults to 10000.
 */
Connection.prototype.startTimeout = function( timeout ) {
    if( timeout == undefined ) { timeout = default_timeout; }

    this.clearTimeout();

    this._timeout = setTimeout( function() {
        this.error( "The request was not handled quickly enough. The server could be overloaded, or an internal error may have occurred.", 503 );
    }.bind( this ), timeout );
}

/**
 * If the connection's time-out timer was started, cancels the timer.
 * Otherwise, does nothing.
 */
Connection.prototype.clearTimeout = function() {
    if( this._timeout != null ) {
        clearTimeout( this._timeout );
        this._timeout = null;
    }
}

/**
 * Call this if an error occurs.
 * It will log the error to the console and generate the appropriate status code & error document to return to the user.
 * @param {String} message - An error message to display to the user. Defaults to "".
 * @param {Number} code - The HTTP response code to return to the user. Defaults to 500.
 */
Connection.prototype.error = function( message, code ) {
    if( message == undefined ) { message = "";  }
    if( code    == undefined ) { code    = 500; }

    this.end( "HTTP/1.1 " + String( code ) + ": " + message, code, error_headers );
    log.err( "ERROR: " + message );
}

/**
 * Call this if a MySQL error occurs.
 * This will log the MySQL error to the console and call error() with code 500.
 *
 * @param {Object} error - The error generated by MySQL
 */
Connection.prototype.mysql_error = function( error ) {
    this.error( "MySQL error! See server log / console for details." );
    log.err( "DETAILS: " + String( error ) );
}

/**
 * Finalize and terminate the connection.
 * Closes the connection with the MySQL server and closes the HTTP connection.
 * If the connection has already been closed, does nothing.
 * @param {String} body - The body of the document to return to the user.
 * @param {Number} code - Response code to return to the user. Defaults to 200 (OK).
 * @param {Object} headers - Response headers to return to the user. Defaults to default_headers.
 */
Connection.prototype.end = function( body, code, headers ) {
    if( this._ended )
        return;

    if( code    == undefined ) { code    = 200;             }
    if( headers == undefined ) { headers = default_headers; }

    //Cancel the connection timeout if one was started.
    this.clearTimeout();

    this._ended = true;

    //Ensure database connection is closed
    if( this.sql != null ) {
        this.sql.end();
        this.sql = null;
    }

    //Write headers and send the body of the message back to the client
    this.res.writeHeader( code, headers );
    this.res.end( body );
}